# vim:set ft=sh:

function check_composer_syntax() {
  local target="$1"

  if [ -f "$target/composer.json" ]; then
      [ -z "$(cat "$target/composer.json")" ] && \
        error "composer.json is empty, remove it from GIT repository or fill its content."
      jq . < "$target/composer.json" >/dev/null 2>&1 || error "composer.json is not a valid JSON file."
  fi

  if [ -f "$target/composer.lock" ]; then
      [ -z "$(cat "$target/composer.lock")" ] && \
        error "composer.lock is empty, generate it with the composer command."
      jq . < "$target/composer.lock" >/dev/null 2>&1 || error "composer.lock is not a valid JSON file."
  fi
}

function check_composer_json_and_lock() {
  local target="$1"

  if [ ! -f "$target/composer.json" ]; then
      return 0
  fi

  if [ ! -f "$target/composer.lock" ]; then
      error "composer.lock has not been found, please lock the dependencies of your project."
  fi
}

function install_composer_deps() {
    local cwd=$(pwd)
    local target="$1"

    # If there is no composer.json, we install nothing
    if [ ! -f "$target/composer.json" ] ; then
      return 0
    fi

    export COMPOSER_CACHE_DIR=$CACHE_DIR/composer
    mkdir -p $COMPOSER_CACHE_DIR
    mkdir -p "$target/vendor/composer/bin"

    local checksum=$(curl --silent "${PHP_BASE_URL}/composer/composer-${COMPOSER_VERSION}.phar.md5")

    status "Vendoring Composer ${COMPOSER_VERSION}"
    if [ ! -f "$CACHE_DIR/composer.phar.md5" ] || [ "$(cat $CACHE_DIR/composer.phar.md5)" != "$checksum" ]; then
        echo "Updating Composer" | indent
        curl --silent "${PHP_BASE_URL}/composer/composer-${COMPOSER_VERSION}.phar" > "$CACHE_DIR/composer.phar" | indent
        chmod a+x "$CACHE_DIR/composer.phar"
        echo "$checksum" > $CACHE_DIR/composer.phar.md5
    else
        echo "Checksums match. Fetching Composer from cache." |indent
    fi

    cp "$CACHE_DIR/composer.phar" "$target/vendor/composer/bin/"

    # Add composer to the path
    cp "$target/vendor/composer/bin/composer.phar" "$target/bin/composer"
    cp "$target/vendor/composer/bin/composer.phar" "$target/bin/composer.phar"

    local required_extensions=$(jq --raw-output '.require // {} | keys | .[]' < "$BUILD_DIR/composer.json" | grep '^ext-' | sed 's/^ext-//')
    if [ -n "$required_extensions" ]; then
        status "Bundling additional extensions"
        for ext in $required_extensions; do
            local apt_deps=""
            local ext_version=$(jq --raw-output ".require | .[\"ext-${ext}\"]" < "${BUILD_DIR}/composer.json")

            is_embedded_extension "${ext}"
            local is_embedded=${?}

            if [ ${is_embedded} -eq 0 ] ; then
                echo "PHP extension ${ext} is embedded in runtime" | indent
                continue
            fi

            if [ "$ext" = "oci8" ] ; then
              apt_deps="libaio-dev"
            fi

            if [ -n "$apt_deps" ] ; then
              echo "Installing dependencies for ${ext}: ${apt_deps}" | indent
              install_env_file="$(apt_install "${apt_deps}" "${BUILD_DIR}" "${CACHE_DIR}" "${ENV_DIR}")"
              # Source environment to export LD_LIBRARY_PATH
              source "${install_env_file}"
              rm "${install_env_file}"
            fi

            # Install third-party dependencies after ubuntu packages have been added
            if [ "$ext" = "oci8" ] ; then
              install_oracle_client_extension "${BUILD_DIR}" "${CACHE_DIR}"
            elif [ "$ext" = "memcached" ] ; then
              fetch_package "$PHP_BASE_URL" "libmemcached-${libmemcached_version}" "/app/vendor/libmemcached" | indent
            elif [ "$ext" = "gmp" ] ; then
              fetch_package "$PHP_BASE_URL" "gmp-${gmp_version}" "/app/vendor/gmp" | indent
            elif [ "$ext" = "tidy" ] ; then
              fetch_package "$PHP_BASE_URL" "libtidy-${tidy_version}" "/app/vendor/libtidy" | indent
            elif [ "$ext" = "sodium" ] ; then
              if [[ "$(php_api_version)" -lt "${PHP_MODULE_API_VERSIONS["7.4"]}" ]] ; then
                sodium_version=$sodium_php72_php73_version
              fi
              fetch_package "$PHP_BASE_URL" "libsodium-${sodium_version}" "/app/vendor/libsodium" | indent
            fi

            local extension_package_path="ext/$(php_api_version)/php-${ext}"
            package_found="$(has_package "${PHP_BASE_URL}" "${extension_package_path}")"
            if [ "${package_found}" = "true" ] ; then
              echo "Installing PHP extension: ${ext}" | indent
              fetch_package "${PHP_BASE_URL}" "${extension_package_path}" "/app/vendor/php"
            else
              install_pecl_extension "${ext}" "${ext_version}" "${CACHE_DIR}"
            fi
        done
    fi

    if [ -n "$COMPOSER_GITHUB_TOKEN" ]; then
        status "Configuring the GitHub authentication for Composer"
        php "vendor/composer/bin/composer.phar" config -g github-oauth.github.com "$COMPOSER_GITHUB_TOKEN" --no-interaction
    fi

    status "Installing application dependencies with Composer"
    {
        local devopt="--no-dev"
        local dev=${COMPOSER_DEV:=false}
        [ "x$dev" = "xtrue" ] && devopt="--dev"

        cd "$target"
        php "vendor/composer/bin/composer.phar" install \
            --prefer-dist \
            --optimize-autoloader \
            --no-interaction \
            $devopt
        cd "$cwd"
    } | indent
}

function is_embedded_extension() {
    # Return codes:
    #   0: The extension is embedded.
    #   1: The extension is NOT embedded.
    # 255: We couldn't check whether the extension is embedded or not.

    local rc=1
    local extension_name="${1}"

    local modules_list="$( php --modules )"
    # For some reason, it seems that the above command always returns `0`,
    # even when it fails.
    # Hence comparing what the command echoed:

    if [ "${modules_list}" = "" ] ; then
        echo "Unable to check whether the extension is already embedded or not. Exiting." | indent
        rc=255
    else
        grep --quiet --ignore-case "${extension_name}" <<< "${modules_list}"
        rc=${?}
    fi

    exit ${rc}
}
